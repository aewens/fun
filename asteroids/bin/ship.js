// Generated by CoffeeScript 1.7.1
(function() {
  var Polygon, Ship, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.App = (_ref = window.App) != null ? _ref : {};

  Polygon = this.App.Polygon;

  Ship = (function(_super) {
    __extends(Ship, _super);

    function Ship(points, fs, s, x, y) {
      this.x = x;
      this.y = y;
      Ship.__super__.constructor.call(this, points);
      this.flames = new Polygon(fs);
      this.flames.scale(s);
      this.max = {
        x: null,
        y: null
      };
      this.scale(s);
      this.angle = 0;
      this.vel = {
        x: 0,
        y: 0
      };
    }

    Ship.prototype.addVel = function() {
      var speed;
      speed = 1 / 20;
      if (Math.sqrt(this.vel.x * this.vel.x + this.vel.y * this.vel.y) < 20) {
        this.vel.x = this.vel.x + speed * Math.cos(this.angle);
        return this.vel.y = this.vel.y + speed * Math.sin(this.angle);
      }
    };

    Ship.prototype.rotate = function(theta) {
      Ship.__super__.rotate.call(this, theta);
      this.flames.rotate(theta);
      return this.angle = this.angle + theta;
    };

    Ship.prototype.update = function() {
      var friction;
      this.x = this.x + this.vel.x;
      this.y = this.y + this.vel.y;
      friction = 0.99;
      this.vel.x = this.vel.x * friction;
      this.vel.y = this.vel.y * friction;
      if (this.x > this.max.x) {
        this.x = 0;
      } else if (this.x < 0) {
        this.x = this.max.x;
      }
      if (this.y > this.max.y) {
        return this.y = 0;
      } else if (this.y < 0) {
        return this.y = this.max.y;
      }
    };

    Ship.prototype.render = function(ctx) {
      ctx.drawPoly(this, this.x, this.y);
      return ctx.drawPoly(this.flames, this.x, this.y);
    };

    return Ship;

  })(Polygon);

  this.App.Ship = Ship;

}).call(this);
