// Generated by CoffeeScript 1.7.1
(function() {
  var Cells;

  Cells = (function() {
    function Cells(paper, unit, x, y) {
      this.x = x;
      this.y = y;
      this.u = unit;
      this.p = paper.getContext("2d");
      this.paper = paper;
      this.pop = this.x * this.y;
      this.alive = this.generate();
    }

    Cells.prototype.xy = function(a) {
      var x, y;
      x = a % this.x;
      y = div(a, this.x);
      return [x, y];
    };

    Cells.prototype.generate = function() {
      var a, alive, chance, x, y, _i, _ref, _ref1;
      alive = new Array(this.pop);
      chance = 0.95;
      for (a = _i = 0, _ref = this.pop - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; a = 0 <= _ref ? ++_i : --_i) {
        alive[a] = random() > chance;
        if (alive[a]) {
          _ref1 = this.xy(a), x = _ref1[0], y = _ref1[1];
          this.draw_cell(x, y);
        }
      }
      return alive;
    };

    Cells.prototype.draw_cell = function(x, y) {
      if (x >= this.x) {
        x = 0;
      }
      if (y >= this.y) {
        y = 0;
      }
      if (x < 0) {
        x = this.x - 1;
      }
      if (y < 0) {
        y = this.y - 1;
      }
      return this.p.fillRect(x * this.u, y * this.u, this.u, this.u);
    };

    Cells.prototype.neighbors = function(x, y) {
      var count;
      count = 0;
      if (this.alive[(x - 1) + (y - 1) * this.x]) {
        count = count + 1;
      }
      if (this.alive[x + (y - 1) * this.x]) {
        count = count + 1;
      }
      if (this.alive[(x + 1) + (y - 1) * this.x]) {
        count = count + 1;
      }
      if (this.alive[(x - 1) + y * this.x]) {
        count = count + 1;
      }
      if (this.alive[(x + 1) + y * this.x]) {
        count = count + 1;
      }
      if (this.alive[(x - 1) + (y + 1) * this.x]) {
        count = count + 1;
      }
      if (this.alive[x + (y + 1) * this.x]) {
        count = count + 1;
      }
      if (this.alive[(x + 1) + (y + 1) * this.x]) {
        count = count + 1;
      }
      return count;
    };

    Cells.prototype.next_gen = function() {
      var a, alive, ns, x, y, _i, _ref, _ref1, _results;
      _results = [];
      for (a = _i = 0, _ref = this.pop - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; a = 0 <= _ref ? ++_i : --_i) {
        _ref1 = this.xy(a), x = _ref1[0], y = _ref1[1];
        ns = this.neighbors(x, y);
        alive = this.alive[a];
        this.alive[a] = false;
        if (alive) {
          if (ns === 2 || ns === 3) {
            this.alive[a] = true;
            _results.push(this.draw_cell(x, y));
          } else {
            _results.push(void 0);
          }
        } else {
          if (ns === 3) {
            this.alive[a] = true;
            _results.push(this.draw_cell(x, y));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    Cells.prototype.animate = function(render) {
      var l, rf, self;
      self = this;
      rf = function(x, y) {
        return window.requestAnimationFrame(x, y);
      };
      l = function() {
        render();
        return rf(l, self.paper);
      };
      return rf(l, this.paper);
    };

    return Cells;

  })();

  window.Cells = Cells;

}).call(this);
