// Generated by CoffeeScript 1.7.1
(function() {
  var B, f, init, proto,
    __slice = [].slice;

  B = function() {
    var proto;
    proto = {
      using: function(fn) {
        this.init = fn;
        return this;
      },
      "with": function(obj) {
        this.proto = obj;
        return this;
      },
      make: function() {
        var F, self;
        self = this;
        F = function(args) {
          return self.init.apply(this, args);
        };
        F.prototype = B.fn = self.proto;
        return function() {
          return new F(arguments);
        };
      }
    };
    return Object.create(proto);
  };

  f = function(a, b, c) {
    c.neg().f();
    return B.fn.on(a + b, 3).run(console.log, c.t().neg());
  };

  init = function() {
    var args, fn;
    fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.val = false;
    args.push(this);
    fn.apply(this, args);
    return this;
  };

  proto = {
    on: function(value, expect) {
      if (value === expect) {
        this.t();
      }
      return this;
    },
    run: function() {
      var args, fn;
      fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.val) {
        return fn.apply(null, args);
      }
    },
    neg: function() {
      this.val = !this.val;
      return this;
    },
    t: function() {
      this.val = true;
      return this;
    },
    f: function() {
      this.val = false;
      return this;
    }
  };

  B().using(init)["with"](proto).make()(f, 1, 2);

}).call(this);
