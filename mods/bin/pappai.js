// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["dom"], function($) {
    var CCircle, CNode, Pappai;
    CNode = (function() {
      function CNode() {
        this.PAPER = $.find("canvas").element;
        this.PAINT = this.PAPER.getContext("2d");
        this.x = 0;
        this.y = 0;
        this.fcolor = "#000";
        this.bcolor = "#fff";
        this.scolor = "#000";
      }

      CNode.prototype.set = function(x, y) {
        this.x = x;
        this.y = y;
        return this;
      };

      CNode.prototype.fg = function(color) {
        this.fcolor = color || this.fcolor;
        return this;
      };

      CNode.prototype.bg = function(color) {
        this.bcolor = color || this.bcolor;
        return this;
      };

      CNode.prototype.sg = function(color) {
        this.scolor = color || this.scolor;
        return this;
      };

      CNode.prototype.give = function(k, v) {
        this[k] = v;
        return this;
      };

      CNode.prototype.get = function(k) {
        return this[k];
      };

      CNode.prototype.line = function(xa, ya, xb, yb) {
        this.PAINT.beginPath();
        this.PAINT.moveTo(xa, ya);
        this.PAINT.lineTo(xb, yb);
        this.PAINT.closePath();
        this.PAINT.strokeStyle = this.scolor;
        return this.PAINT.stroke();
      };

      CNode.prototype.link = function(node) {
        if (node instanceof CNode) {
          this.line(this.x, this.y, node.x, node.y);
        }
        return this;
      };

      return CNode;

    })();
    CCircle = (function(_super) {
      __extends(CCircle, _super);

      function CCircle(Pappai, radius) {
        this.give("radius", radius);
        this.give("pi", Math.PI);
        this.give("tau", 2 * Math.PI);
        CCircle.__super__.constructor.apply(this, arguments);
      }

      CCircle.prototype.render = function() {
        this.PAPER.style.backgroundColor = this.bcolor;
        this.PAINT.fillStyle = this.fcolor;
        this.PAINT.arc(this.x, this.y, this.radius, 0, this.tau);
        this.PAINT.fill();
        return this;
      };

      return CCircle;

    })(CNode);
    Pappai = {
      Node: function() {
        return new CNode();
      },
      Circle: function(radius) {
        return new CCircle(this, radius);
      }
    };
    return Pappai;
  });

}).call(this);
